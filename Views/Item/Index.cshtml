@model PaginatedList<Item>
@using Microsoft.AspNetCore.Mvc.Rendering
@using hw_sorting_filtering_pagination.Helpers
@{
    ViewData["Title"] = "Index";
}

<h1>Items</h1>

<form asp-action="Index" method="get">
    <p>
        Find by name: <input type="text" name="searchString">
        <input type="submit" value="Search" />
    </p>
</form>

<form asp-action="Index" method="get">
    <p>Filter by category:
        <select name="searchString">
            @foreach (var category in Model.categories)
            {
                <option value="@category.Name">@category.Name</option>
            }
        </select>
    <input type="submit" value="Filter" />
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm })
            </th>
            <th>
                @Html.ActionLink("Price", "Index", new { sortOrder = ViewBag.PriceSortParm })
            </th>
            <th>
                @Html.ActionLink("Date", "Index", new { sortOrder = ViewBag.DateSortParm })
            </th>
            <th>
                @Html.ActionLink("Category", "Index", new { sortOrder = ViewBag.CategorySortParm })
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category.Name)
                </td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="Page navigation example">
    <ul class="pagination">
        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
            <a class="page-link" href="@(Model.HasPreviousPage ? Url.Action("Index", new { sortOrder = ViewData["CurrentSort"], pageNumber = Model.PageIndex - 1 }) : "#")" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
                <span class="sr-only">Previous</span>
            </a>
        </li>
        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
            <a class="page-link" href="@(Model.HasNextPage ? Url.Action("Index", new { sortOrder = ViewData["CurrentSort"], pageNumber = Model.PageIndex + 1 }) : "#")" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
                <span class="sr-only">Next</span>
            </a>
        </li>
    </ul>
</nav>
